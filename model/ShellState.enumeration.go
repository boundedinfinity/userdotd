//************************************************************************************
//*                                                                                  *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package model

import (
	"encoding/json"
	"fmt"
	"strings"
)

type ShellState string

const (
	ShellState_Broken        ShellState = "broken"
	ShellState_Initialized   ShellState = "initialized"
	ShellState_Uninitialized ShellState = "uninitialized"
	ShellState_Unknown       ShellState = "unknown"
)

var (
	ShellStates = []ShellState{
		ShellState_Broken,
		ShellState_Initialized,
		ShellState_Uninitialized,
		ShellState_Unknown,
	}
)

func IsShellState(v string) bool {
	var f bool

	for _, e := range ShellStates {
		if string(e) == v {
			f = true
			break
		}
	}

	return f
}

func ShellStateParse(v string) (ShellState, error) {
	var o ShellState
	var f bool
	n := strings.ToLower(v)

	for _, e := range ShellStates {
		if strings.ToLower(e.String()) == n {
			o = e
			f = true
			break
		}
	}

	if !f {
		return o, ErrShellStateNotFound(v)
	}

	return o, nil
}

func ErrShellStateNotFound(v string) error {
	var ss []string

	for _, e := range ShellStates {
		ss = append(ss, string(e))
	}

	return fmt.Errorf(
		"invalid enumeration type '%v', must be one of %v",
		v, strings.Join(ss, ","),
	)
}

func (t ShellState) String() string {
	return string(t)
}

func (t ShellState) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(t))
}

func (t *ShellState) UnmarshalJSON(data []byte) error {
	var s string

	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e, err := ShellStateParse(s)

	if err != nil {
		return err
	}

	t = &e

	return nil
}
